public class RySiteMifgs2019Controller {
    
    @AuraEnabled
    public static List<Session__c> fetchSessions() {
        
        List<Session__c> sessions = [SELECT Workshop_Name__c, 
                                            Date__c, 
                                            Start_Time__c, 
                                            End_Time__c,
                                            Capacity_Status__c
                                       FROM Session__c 
                                      WHERE Workshop__r.Event__r.Name = 'MIFGS 2019'
                                        AND Date__c >= :System.Today()
                                        AND Capacity_Status__c = 'AVAILABLE'
                                   ORDER BY Date__c, Start_Time__c];
        System.debug('DBG: sessions > ' + sessions);
        return sessions;
    }

    @AuraEnabled
    public static Id submitSegmentationDetailsApex(SObject attendee, String confidenceLevel, String skillLevel){
        // TODO: setting of error message after AuraHandledException for testing
        // TODO: tests
        // TODO: user friendly error message

        Account acct = (Account)attendee;

        System.debug('DBG: attendee > ' + attendee);
        System.debug('DBG: acct > ' + acct);
        System.debug('DBG: confidenceLevel > ' + confidenceLevel);
        System.debug('DBG: skillLevel > ' + skillLevel);

        Id existingPersonAccountId;
        Id b2c = Schema.SObjectType.Account.getRecordTypeInfosByName().get('B2C Consumer Contact').getRecordTypeId();
        List<Account> existingAccounts = [SELECT Id 
                                            FROM Account 
                                           WHERE RecordTypeId = :b2c 
                                             AND Brand__pc = 'Ryobi' 
                                             AND PersonEmail = :acct.PersonEmail
                                           LIMIT 1];
        if (existingAccounts.isEmpty()) {
            acct.RecordTypeId = b2c;
            acct.Brand__pc = 'Ryobi';
            acct.MIFGS_2019_Attendee__c = true;

            try {
                insert acct;
                existingPersonAccountId = acct.Id;
            } catch (Exception e) {
                System.debug('DBG: e >>> ' + e.getMessage());
                throw new AuraHandledException(e.getMessage());
            }
        } else if (existingAccounts.size() == 1) {
            try {
                Account a = existingAccounts.get(0);
                a.MIFGS_2019_Attendee__c = true;
                update a;
                existingPersonAccountId = a.Id;
            } catch (Exception e) {
                System.debug('DBG: e >>> ' + e.getMessage());
                throw new AuraHandledException(e.getMessage());
            }
        } else {
            System.debug('DBG: multi records found ');
            throw new AuraHandledException('Multiple records exist. Please contact your administrator.');
        }
        
        Marketing_Campaign__c mc = new Marketing_Campaign__c();
        mc.Person_Account__c = existingPersonAccountId;
        mc.DIY_Enjoyment_Level__c = confidenceLevel;
        mc.DIY_Skill_Level__c = skillLevel;

        try {
            insert mc;
        } catch (Exception e) {
            System.debug('DBG: e >>> ' + e.getMessage());
            throw new AuraHandledException(e.getMessage());
        }
        
        return existingPersonAccountId;
    }

    @AuraEnabled
    public static Boolean sattendSessionApex(String personAccountId, String selectedSessionId) {
        // TODO: setting of error message after AuraHandledException for testing
        // TODO: tests
        // TODO: user friendly error message

        System.debug('DBG: attendSession > personAccountId > ' + personAccountId);
        System.debug('DBG: attendSession > selectedSessionId > ' + selectedSessionId);

        Session_Attendee__c sa = new Session_Attendee__c();
        sa.Attendee__c = (Id)personAccountId;
        sa.Session__c = (Id)selectedSessionId;
        sa.Unique_Attendance_Code__c = 'TEMP_CODE';

        try {
            insert sa;
            return true;
        } catch (Exception e) {
            System.debug('DBG: e >>> ' + e.getMessage());
            throw new AuraHandledException(e.getMessage());
        }
    }

    //private static HttpResponse execCallout(String accountNumber, String jsonRequest, String username, String secret, String endpoint, String webMethod) {
    //    Http http = new Http();
    //    HttpRequest request = new HttpRequest();
    //    request.setEndpoint(endpoint);
    //    request.setMethod(webMethod);
    //    request.setHeader('Content-Type', 'application/json');
    //    request.setHeader('Accept', 'application/json');
    //    request.setHeader('Account-Number', accountNumber);
    //    request.setHeader('Authorization', 'Basic ' + generateEncodedAuthKey(username, secret));

    //    request.setBody(jsonRequest);
    //    HttpResponse response = http.send(request);

    //    System.debug('DBG: response.getStatusCode() >>> ' + response.getStatusCode());
    //    System.debug('DBG: response.getStatus() >>> ' + response.getStatus());
    //    System.debug('DBG: response.getBody() >>> ' + response.getBody());

    //    return response;
    //}

    // public static String getAccessToken() {

    //     // TODO: 
    //     // - add error catching mechanism
    //     // - further abstract to make testing easier

    //     Http http = new Http();
    //     HttpRequest request = new HttpRequest();
    //     request.setEndpoint('https://ttibrandsanz--devsandbox.cs72.my.salesforce.com/services/oauth2/token');
    //     request.setMethod('POST');
    //     request.setHeader('Accept', 'application/json');
    //     //request.setHeader('Access-Control-Allow-Origin', '*');

    //     //String body = '' +
    //     //    'grant_type=password' +
    //     //    '&client_id=3MVG910YPh8zrcR1hlcJOOhoM8TQFXgiZsa57dLvZoss7MHCathjUhYBpVqdUGZzBHZwyjrzXj_4s6gnFyIe6' +
    //     //    '&client_secret=9074307312320531084' + 
    //     //    '&username=' + EncodingUtil.urlEncode('milwaukee.registration@ttibrands.com.au.devsandbox', 'UTF-8') +
    //     //    '&password=' + EncodingUtil.urlEncode('veryveryhardpassword123@', 'UTF-8');

    //     String body = '' +
    //         'grant_type=password' +
    //         '&client_id=3MVG910YPh8zrcR1hlcJOOhoM8fP62BMDY7MqTLn_2tJWB9Lu7NwxD45U2PN1M1eIaXjgjAi96l_D1.DFy0UE' +
    //         '&client_secret=A015C9023C40BF6F78B761ABB969BF3808F999D85B13784CDF12AC6C7E43FD28' + 
    //         '&username=' + EncodingUtil.urlEncode('milwaukee.registration@ttibrands.com.au.devsandbox', 'UTF-8') +
    //         '&password=' + EncodingUtil.urlEncode('veryveryhardpassword123@', 'UTF-8');
    //     request.setBody(body);

    //     HttpResponse response = http.send(request);

    //     System.debug('DBG: response.getStatusCode() >>> ' + response.getStatusCode());
    //     System.debug('DBG: response.getStatus() >>> ' + response.getStatus());
    //     System.debug('DBG: response.getBody() >>> ' + response.getBody());

    //     Map<String, Object> deserialized = (Map<String, Object>)JSON.deserializeUntyped(String.valueOf(response.getBody()));
    //     System.debug('DBG: deserialized > ' + deserialized);
    //     System.debug('DBG: access_token > ' + deserialized.get('access_token'));

    //     return String.valueOf(deserialized.get('access_token'));
    // }
    
    public static void fakeMethod() {
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
    
}